@page "/"
@rendermode InteractiveServer
@using System.Reflection.Metadata
@using WebDev_Labb2.DataAccess
@using WebDev_Labb2.DataAccess.Entities
@using WebDev_Labb2.Shared.DTOs
@using WebDev_Labb2.Shared.Interfaces
@inject IHttpClientFactory _httpClientFactory
@inject IProductService<ProductDTO> ProductService

<PageTitle>Products</PageTitle>

<header class="header">
    <h1>Products</h1>
</header>

<div class="spacer"></div>

<h3>New product</h3>
<div class="container text-center m-2">
    <div class="row row-cols-auto">
        <InputText class="form-control col" placeholder="Name" @bind-Value="newProductName"></InputText>
        <InputText class="form-control col" placeholder="EAN" @bind-Value="newProductEAN"></InputText>
        <InputText class="form-control col" placeholder="Price" @bind-Value="newProductPrice"></InputText>
        <InputText class="form-control col" placeholder="Category" @bind-Value="newProductCategory"></InputText>
        <button class="btn btn-outline-success" type="submit" onclick="AddNewProduct">Add</button>
        <InputText class="form-control col" placeholder="Description" @bind-Value="newProductDescription"></InputText>
        <InputText class="form-control col" placeholder="Discontinued" @bind-Value="newProductStatus"></InputText>
        <button class="btn btn-outline-success" type="submit" onclick="UpdateProduct">Update</button>
    </div>
</div>

<div class="spacer"></div>

<div class="container text-center m-2"> 
    <div class="row row-cols-auto">
        <InputText class="form-control col" placeholder="Search product with EAN" @bind-Value="searchText"></InputText>
        <button class="btn btn-outline-secondary" type="submit">Search</button>
    </div>
</div>

<table id="productTable" class="table">
    <thead>
        <tr class="productTitles">
        <th scope="col"></th>
        <th scope="col">Name</th>
        <th scope="col">EAN</th>
        <th scope="col">Price</th>
        <th scope="col">Category</th>
        <th scope="col">Description</th>
        <th scope="col"></th>
        </tr>
    </thead>
    <tbody class="productList">
        <div class="dbProducts">
            @foreach (var products in DbProducts)
            {

                //products.Name;
                
                <div class="prod">
                    <th scope="col"></th>
                    <th scope="col">@products.Name</th>
                    <th scope="col">@products.EAN</th>
                    <th scope="col">@products.Price</th>
                    <th scope="col">@products.Category</th>
                    <th scope="col">@products.Description</th>
                    <th scope="col"></th>
                </div>
            }
         </div>
    
    </tbody>
</table>




<style>
    h1 {
        text-align : center;
        font-family: Consolas;
        color: rebeccapurple;
    }
    .header{
        margin : 20px;
    }

    .spacer{
        height : 50px;
    }
    .searchLabel{
        width: 100px;
        font-family: 'Yu Gothic';
        font-size: 20px;
    }
    .form-control{
        width : 450px;
    }
    .productTitles {
        background-color: lightgrey;
        font-family : 'Yu Gothic';
        font-size : 20px;
    }
    .productList{
        font-family: 'Yu Gothic';
        font-size : 18px;
    }
    .discontinuedItem {
        color : red;
        font-weight : bolder;
    }
</style>

<script>
    
    const productList = document.getElementById("productTable");
    

</script>

@code
{
    public string searchText = String.Empty;

    public string newProductName = String.Empty;
    public string newProductEAN = String.Empty;
    public string newProductPrice = String.Empty;
    public string newProductCategory = String.Empty;
    public string newProductDescription = String.Empty;
    public string newProductStatus = String.Empty;

    public List<ProductDTO> DbProducts = new();

    protected override async Task OnInitializedAsync()
    {
        //var db = new HandmadeDbContext();


        var products = await ProductService.GetAllProducts();
        DbProducts.AddRange(products);

        // var client = _httpClientFactory.CreateClient("RestApi");
        // var response = await client.GetAsync("/products/start=0&count=0");


        await base.OnInitializedAsync();
    }

    private void AddNewProduct()
    {
        

        ClearAllFields();
    }

    private void ClearAllFields()
    {
        newProductName = String.Empty;
        newProductEAN = String.Empty;
        newProductPrice = String.Empty;
        newProductCategory = String.Empty;
        newProductDescription = String.Empty;
        newProductStatus = String.Empty;
    }
}
